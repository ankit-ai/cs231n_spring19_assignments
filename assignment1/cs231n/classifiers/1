from builtins import range
import numpy as np
from random import shuffle
from past.builtins import xrange

def softmax_loss_naive(W, X, y, reg):
    """
    Softmax loss function, naive implementation (with loops)

    Inputs have dimension D, there are C classes, and we operate on minibatches
    of N examples.

    Inputs:
    - W: A numpy array of shape (D, C) containing weights.
    - X: A numpy array of shape (N, D) containing a minibatch of data.
    - y: A numpy array of shape (N,) containing training labels; y[i] = c means
      that X[i] has label c, where 0 <= c < C.
    - reg: (float) regularization strength

    Returns a tuple of:
    - loss as single float
    - gradient with respect to weights W; an array of same shape as W
    """
    # Initialize the loss and gradient to zero.
    loss = 0.0
    dW = np.zeros_like(W)

    #############################################################################
    # TODO: Compute the softmax loss and its gradient using explicit loops.     #
    # Store the loss in loss and the gradient in dW. If you are not careful     #
    # here, it is easy to run into numeric instability. Don't forget the        #
    # regularization!                                                           #
    #############################################################################
    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    num_train = X.shape[0]
    num_class = W.shape[1]
    for i in range(0,num_train):
      score = np.dot(X[i],W)
      score -=np.max(score)
      p = np.exp(score)/np.sum(np.exp(score))
      loss-=np.log(p[y[i]])
      for j in range(0,num_class):
         #print('j is',j)
         if j != y[i]:
           #print('shape of pyj is',p[y[j]])
           dW[:,j] += p[j]*X[i,:]
         else:
           #print('yi is',y[i])
           dW[:,j] += (p[y[i]]-1)*X[i,:]

    loss /= num_train
    loss +=  reg * np.sum(W * W)
    dW /=num_train 
    dW += 2*reg*W 

    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    return loss, dW


def softmax_loss_vectorized(W, X, y, reg):
    """
    Softmax loss function, vectorized version.

    Inputs and outputs are the same as softmax_loss_naive.
    """
    # Initialize the loss and gradient to zero.
    loss = 0.0
    dW = np.zeros_like(W)

    #############################################################################
    # TODO: Compute the softmax loss and its gradient using no explicit loops.  #
    # Store the loss in loss and the gradient in dW. If you are not careful     #
    # here, it is easy to run into numeric instability. Don't forget the        #
    # regularization!                                                           #
    #############################################################################
    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    num_train = X.shape[0]
    num_class = W.shape[1]
    scores = np.dot(X,W)
    p = np.exp(scores)/np.sum(np.exp(scores),axis=1,keepdims=True)
    loss = -np.sum(np.log(p[np.arange(0,num_train),y]))
    print('shape of p is',p.shape)
    #prob = p[:,y] -1
    prob[np.arange(X.shape[0]), y] -= 1


    print('shape of prob',prob.shape) 
    print('shape of dW before',dW.shape)
    dW = np.dot(X.T,prob)
    print('shape of dW after',dW.shape)
    dW /=num_train
    dW += 2 * reg * W
    loss /=num_train
    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    return loss, dW
